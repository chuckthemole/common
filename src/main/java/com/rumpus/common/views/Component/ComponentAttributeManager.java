package com.rumpus.common.views.Component;

import com.rumpus.common.Manager.AbstractCommonManager;
import com.rumpus.common.views.Html.Attribute;
import com.rumpus.common.views.Html.HtmlTagAttributes;

public class ComponentAttributeManager extends AbstractCommonManager<String, HtmlTagAttributes> {

    private static final String NAME = "AttributeManager";

    private ComponentAttributeManager(boolean allowUseOfAutoGeneratedKey) {
        super(NAME, allowUseOfAutoGeneratedKey);
    }

    public static ComponentAttributeManager create() {
        return new ComponentAttributeManager(false);
    }

    /**
     * Creates an {@link ComponentAttributeManager} object from a {@link java.util.Map} of {@link String} keys and {@link String} values.
     * <p>
     * The {@link String} keys are the names of the {@link HtmlTagAttributes} objects.
     * <p>
     * The {@link String} values are the values of the {@link Attribute} objects, delimited by the attributeDelimiter.
     * <p>
     * Note: this is using default values for the attributeDelimiter, propValueDelimiter, and valueDelimiter. "," "=" and " " respectively.
     * 
     * @param attributesMap the {@link java.util.Map} of {@link String} keys and {@link String} values
     * @return an {@link ComponentAttributeManager} object
     */
    public static ComponentAttributeManager createFromMap(java.util.Map<String, String> attributesMap) {
        ComponentAttributeManager attributeManager = new ComponentAttributeManager(false);
        for (java.util.Map.Entry<String, String> entry : attributesMap.entrySet()) {
            attributeManager.put(entry.getKey(), HtmlTagAttributes.createFromString(entry.getValue(), ",", "=", " "));
        }
        return attributeManager;
    }

    public java.util.Map<String, String> getAttributesAsMap() {
        java.util.Map<String, String> attributes = new java.util.HashMap<String, String>();
        for (java.util.Map.Entry<String, HtmlTagAttributes> entry : this.entrySet()) {
            HtmlTagAttributes attribute = entry.getValue();
            if (attribute != null) {
                attributes.put(entry.getKey(), attribute.getAttributesAsString());
            }
        }
        return attributes;
    }

    @Override
    public HtmlTagAttributes createEmptyManagee() {
        return HtmlTagAttributes.createEmpty();
    }

    @Override
    public HtmlTagAttributes createEmptyManagee(String name) {
        HtmlTagAttributes htmlTagAttributes = HtmlTagAttributes.createEmpty();
        this.put(name, htmlTagAttributes);
        return htmlTagAttributes;
    }
}
